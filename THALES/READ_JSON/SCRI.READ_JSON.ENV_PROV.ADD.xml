<?xml version="1.0" encoding="UTF-8"?>
<scri>
   <metadata>
      <row>
         <version>21.0.0</version>
      </row>
   </metadata>
   <general_attributes>
      <row>
         <minimum_ae_version>11.2</minimum_ae_version>
         <auto_deactivation>A</auto_deactivation>
         <child_flags>00000000000000000000000000000000</child_flags>
         <ert>1</ert>
         <last_runtimes>AQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAA==</last_runtimes>
         <max_parallel_action>1</max_parallel_action>
         <mrt_time>000000</mrt_time>
         <name>SCRI.READ_JSON.ENV_PROV.ADD</name>
         <type>SCRI</type>
         <inherit_output_filter>N</inherit_output_filter>
         <queue>{VARA.GLOBAL.ENV_PROV.ADD, QUEUE, 1}</queue>
         <versioning_id>1071243768</versioning_id>
      </row>
   </general_attributes>
   <scripts>
      <row>
         <process><![CDATA[! analyse &TEXT01#
! PROV_ENV.ADD
:SET &PROVENV_QUEUE#=QUEUE.ENV_PROV.ADD
:SET &NL# = UC_CRLF()
:SET &STRING# = "AE &NL# system"
:PUBLISH &PROVENV_QUEUE#,,"TOP"
:put_var VARA.GLOBAL.ENV_PROV.ADD,"QUEUE",&PROVENV_QUEUE#
:SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"Traitement du use case ENV_PROD.ADD;DEBUT READ_JSON;&NL#")
:SET &tmp1_TEXT01# = STR_SUB("&TEXT01#", "={", ":{")
!:PRINT &tmp1_TEXT01#

:SET &tmp1_TEXT02# = STR_SUB("&tmp1_TEXT01#", ", value", "; value")
!:PRINT &tmp1_TEXT02#

:DEFINE &PROVENV_PARAMS#, string, 7


:FILL &PROVENV_PARAMS#[] = STR_SPLIT(&tmp1_TEXT02#, ",")
:SET &PROVENV_PARAMS#[6] = STR_SUB("&PROVENV_PARAMS#[6]", "}}", "}")

! ------ BEGIN Extracting ID VALUE ----------------
:SET &input# = &PROVENV_PARAMS#[2]
:PRINT &input#
:SET &RET_ID# = STR_FIND(&input#,"ID")
:IF &RET_ID# NE 0
:  DEFINE &input_tab#, STRING, 2
:  FILL &input_tab#[] = STR_SPLIT(&input#, "=")
:  PRINT "ID VALUE = &input_tab#[2]"
:  SET &AUTOMATOR_ID# = &input_tab#[2]
:  PRINT "AUTOMATOR_ID = &AUTOMATOR_ID#"
:  PUBLISH &AUTOMATOR_ID#,,"TOP"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"AUTOMATOR_ID = &AUTOMATOR_ID# ---> OK;&NL#")
:ELSE
:  PRINT "INPUT doit contenir ID"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"AUTOMATOR_ID =  ---> KO;&NL#")
:  PUBLISH &RBA_REPORT#,,"TOP"
:  EXIT 1
:ENDIF



! ------ BEGIN Extracting EF VALUE ----------------
:SET &input1# = &PROVENV_PARAMS#[4]
:SET &RET_EF# = STR_FIND(&input1#,"EF")
:IF &RET_EF# NE 0
:  DEFINE &input1_tab#, STRING, 2
:  FILL &input1_tab#[] = STR_SPLIT(&input1#, "value=")
:  PRINT "EF VALUE = &input1_tab#[2]"
:  SET &EF# = STR_SUB("&input1_tab#[2]","}","")
:  PRINT "EF = &EF#"
:  PUBLISH &EF#,,"TOP"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"EF = &EF# ---> OK;&NL#")
:ELSE
:  PRINT "INPUT1 doit contenir EF"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"EF =  ---> KO;&NL#")
:  PUBLISH &RBA_REPORT#,,"TOP"
:  EXIT 1
:ENDIF


! ------ BEGIN Extracting TEMPLATE ----------------
:SET &input2# = &PROVENV_PARAMS#[5]
:SET &RET_TEMPLATE# = STR_FIND(&input2#,"TEMPLATE_NAME")
:IF &RET_TEMPLATE# NE 0
:  DEFINE &input2_tab#, STRING, 2
:  FILL &input2_tab#[] = STR_SPLIT(&input2#, "value=")
:  SET &TEMPLATE_NAME# = STR_SUB("&input2_tab#[2]","}","")
:  PRINT "TEMPLATE_NAME = &TEMPLATE_NAME#"
:  PUBLISH &TEMPLATE_NAME#,,"TOP"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"TEMPLATE_NAME = &TEMPLATE_NAME# ---> OK;&NL#")
:ELSE
:  PRINT "INPUT2 doit contenir TEMPLATE_NAME"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"TEMPLATE_NAME =  ---> KO;&NL#")
:  PUBLISH &RBA_REPORT#,,"TOP"
:  EXIT 1
:ENDIF

! ------ BEGIN Extracting NUMBER_CLIENT ----------------
:SET &input3# = &PROVENV_PARAMS#[6]
:SET &RET_NUMBER_CLIENT# = STR_FIND(&input3#,"NUMBER_CLIENT")
:IF &RET_NUMBER_CLIENT# NE 0
:  DEFINE &input3_tab#, STRING, 2
:  FILL &input3_tab#[] = STR_SPLIT(&input3#, "value=")
:  SET &NUMBER_CLIENT# = STR_SUB("&input3_tab#[2]","}","")
:  PRINT "NUMBER_CLIENT = &NUMBER_CLIENT#"
:  PUBLISH &NUMBER_CLIENT#,,"TOP"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"NUMBER_CLIENT = &NUMBER_CLIENT# ---> OK;&NL#")
:ELSE
:  PRINT "INPUT3 doit contenir NUMBER_CLIENT"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"NUMBER_CLIENT =  ---> KO;&NL#")
:  PUBLISH &RBA_REPORT#,,"TOP"
:  EXIT 1
:ENDIF
! ------ BEGIN Extracting ENTITE ----------------
:SET &input4# = &PROVENV_PARAMS#[7]
:SET &RET_ENTITE_KISS# = STR_FIND(&input4#,"ENTITE")
:IF &RET_ENTITE_KISS# NE 0
:  DEFINE &input4_tab#, STRING, 2
:  FILL &input4_tab#[] = STR_SPLIT(&input4#, "value=")
:  SET &ENTITE_KISS# = STR_SUB("&input4_tab#[2]","}","")
:  PRINT "ENTITE_KISS = &ENTITE_KISS#"
:  PUBLISH &ENTITE_KISS#,,"TOP"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"ENTITE_KISS = &ENTITE_KISS# ---> OK;&NL#")
:ELSE
:  PRINT "INPUT4 doit contenir ENTITE_KISS"
:  SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"ENTITE_KISS =  ---> KO;&NL#")
:  PUBLISH &RBA_REPORT#,,"TOP"
:  EXIT 1
:ENDIF

:SET &RBA_REPORT#=STR_CAT(&RBA_REPORT#,"FIN READ_JSON;")
:PUBLISH &RBA_REPORT#,,"TOP"]]></process>
      </row>
   </scripts>
   <script_attributes>
      <row>
         <activation_at_runtime>1</activation_at_runtime>
      </row>
   </script_attributes>
   <rollback_definitions>
      <row>
      </row>
   </rollback_definitions>
</scri>
