<?xml version="1.0" encoding="UTF-8"?>
<jobs>
   <metadata>
      <row>
         <version>21.0.0</version>
      </row>
   </metadata>
   <general_attributes>
      <row>
         <minimum_ae_version>11.2</minimum_ae_version>
         <auto_deactivation>A</auto_deactivation>
         <child_flags>00000000000000000000000000000000</child_flags>
         <ert>11</ert>
         <platform>WINDOWS</platform>
         <last_runtimes>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</last_runtimes>
         <max_parallel_action>1</max_parallel_action>
         <mrt_time>000000</mrt_time>
         <name>PCK.AUTOMIC_VMWARE_VSPHERE.PRV.JOB.GET_VM_NAME_LIST@WINDOWS</name>
         <type>JOBS</type>
         <inherit_output_filter>N</inherit_output_filter>
         <queue>CLIENT_QUEUE</queue>
         <description>Get list of VM</description>
         <versioning_id>-698062591</versioning_id>
      </row>
   </general_attributes>
   <scripts>
      <row>
         <process><![CDATA[:INC PCK.AUTOMIC_VMWARE_VSPHERE.PUB.INCLUDE.EXECUTION_ENVIRONMENT

!-------------------------------------Logging input parameters-------------------------------------------------------------------------------------------------
: INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.HEADER.PARAM_VALIDATION

: INC PCK.AUTOMIC_VMWARE_VSPHERE.PUB.INCLUDE.LOGGING_CONNECTION_DETAILS

: SET &UC4RB_LOGGING_PARAMETER# = "Location"
: SET &UC4RB_LOGGING_PARAMETER_VAL# = "&UC4RB_VSP_LOCATION#"
: INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.PARAM

:INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.HEADER.EXECUTION
:INC PCK.ITPA_SHARED.PRV.INCLUDE.CHANGE_DIRECTORY_TO_AGENT_BIN

!DECRYPT PASSWORD
: INC PCK.ITPA_SHARED.PUB.INCLUDE.ATTACH
: SET &UC4RB_ENCRYPTED_PASSWORD_TMP# = "&UC4RB_VSP_PASSWORD#"
: INC PCK.ITPA_SHARED.PRV.INCLUDE.DECRYPT_PASSWORD


!------------------------------------Prepare PowerCLI commandlet-----------------------------------------------------------------------------------------------
:SET &UC4RB_VSP_GET_VM_LIST_CMDLET# = "Get-VM "

!Check Location
:IF &UC4RB_VSP_LOCATION# <> ""
:  INC PCK.AUTOMIC_VMWARE_VSPHERE.PUB.INCLUDE.ESCAPE_ARG_VALUE &TEMP_OPTION_VALUE# = &UC4RB_VSP_LOCATION#
:  SET &UC4RB_VSP_GET_VM_LIST_CMDLET# = STR_CAT(&UC4RB_VSP_GET_VM_LIST_CMDLET#, "-Location '&UC4RB_VSP_VSPHERE_ESC_VALUE#'")
:ENDIF

!------------------------------------ Powershell script for the action -----------------------------------------------------------------------------------------
try
{
:    SET &UC4RB_LOGGING_INFO# =  "CONNECT CMD: &UC4RB_VSP_CONNECT_CMDLET#"
:    INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.INFO
     $vsp_srv_obj = &UC4RB_VSP_CONNECT_CMDLET# -Password $UC4_DECRYPTED_PWD -Force
     try {
:          SET &UC4RB_LOGGING_INFO# = "GET VM LIST CMND: &UC4RB_VSP_GET_VM_LIST_CMDLET#"
:          INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.INFO
            $vmList = &UC4RB_VSP_GET_VM_LIST_CMDLET#

           Write-Host 'UC4RB_VSP_VM_LIST_COUNT::='$($vmList.count)
           if($vmList.count -ne 0){
:              SET &VARA_OBJ_CONFIG# = "PCK.AUTOMIC_VMWARE_VSPHERE.PRV.VARA.PACKAGE_PARAMETERS"
:              SET &UC4RB_VSP_LIST_SEPARATOR# = GET_VAR(&VARA_OBJ_CONFIG#, "LIST_SEPARATOR")
               Write-Host 'UC4RB_VSP_VM_LIST_VARA::='(($vmList | select -ExpandProperty Name) -join '&UC4RB_VSP_LIST_SEPARATOR#')
           }
      } finally {
           try {
!              Disconnect from the server if connection is establish
:              SET &UC4RB_LOGGING_INFO# =  "DISCONNECT CMD: &UC4RB_VSP_DISCONT_CMDLET#"
:              INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.INFO
               &UC4RB_VSP_DISCONT_CMDLET#
           } catch {
               Write-Host "Unable to disconnect from the server."
               Write-Host "INFO: $($error[0].Exception.Message)"
           }
      }
} catch {
     $errors = 1
     Write-Host "ERROR: $($error[0].Exception.Message)"
}

!-----------------------------------Error Handling-------------------------------------------------------------------------------------
!Status messages
:SET &UC4RB_LOGGING_INFO# = "******** GET VM NAME LIST ACTION EXECUTED SUCCESSFULLY ********"
:SET &UC4RB_LOGGING_ERROR# = "******** GET VM NAME LIST ACTION FAILED ********"

:INC PCK.AUTOMIC_VMWARE_VSPHERE.PUB.INCLUDE.CHECK_ERRORSTATUS]]></process>
      </row>
      <row>
         <pre_process><![CDATA[:INC PCK.ITPA_SHARED.PUB.INCLUDE.START_STOP_JOB_ACCORDING_TO_AGENT_OS
:INC PCK.AUTOMIC_VMWARE_VSPHERE.PUB.INCLUDE.PREP_CONNECTION_CMDLETS]]></pre_process>
      </row>
      <row>
         <post_process><![CDATA[! Publish the Session ID
:SET &STATUS# = GET_UC_OBJECT_STATUS(, , "RETCODE")

! :PSET &UC4RB_VSP_VM_LIST_COUNT# = ""
! :PSET &UC4RB_VSP_VM_LIST# = ""
:IF &STATUS# EQ 0
:  SET &HND# = PREP_PROCESS_REPORT("JOBS", , "REP", , "COL=DELIMITER", 'DELIMITER=*::=*')
:  PROCESS &HND#
:    SET &KEY# = GET_PROCESS_LINE(&HND#, 1)
:    SET &VALUE# = GET_PROCESS_LINE(&HND#, 2)
:    IF &KEY# <> ""
:      IF &VALUE# <> ""
:        IF &KEY# = "UC4RB_VSP_VM_LIST_COUNT"
:          SET &UC4RB_VSP_VM_LIST_COUNT# = "&VALUE#"
:          PUBLISH &UC4RB_VSP_VM_LIST_COUNT#, , "TOP"
:        ENDIF
:        IF &KEY# = "UC4RB_VSP_VM_LIST_VARA"
:          SET &UC4RB_VSP_VM_LIST# = "&VALUE#"
:          P liste de VM
:          P &UC4RB_VSP_VM_LIST#
:          PUBLISH &UC4RB_VSP_VM_LIST#, , "TOP"
:        ENDIF
:      ENDIF
:    ENDIF
:  ENDPROCESS
:  CLOSE_PROCESS &HND#
:ENDIF







:if &VM_NAME_FROM_TICKET# <> ""
! Nom de VM est fournie par l'utilisateur
:  set &VM_NAME_NEW#=&VM_NAME_FROM_TICKET#
:  SET &VM_NAME_LOWER# = STR_LC(&VM_NAME_FROM_TICKET#)
:  if STR_FIND(&UC4RB_VSP_VM_LIST#, &VM_NAME_NEW#)= 0
:    P vm name is &VM_NAME_NEW# is valid
:    PSET &VM_NAME_NEW#="&VM_NAME_NEW#"
:    pset &VM_NAME_LOWER#="&VM_NAME_LOWER#"
:    PUBLISH &VM_NAME_NEW#, , "WORKFLOW"
:    PUBLISH &VM_NAME_LOWER#, , "WORKFLOW"
:    PUT_VAR_COL &VARA_NAME_TICKET#, "VM_NAME_NEW#", 1, "&VM_NAME_NEW#"
:    PUT_VAR_COL &VARA_NAME_TICKET#, "VM_NAME_LOWER#", 1, "&VM_NAME_LOWER#"
:  else
:    P vm name &VM_NAME_NEW# is alredy used
:    stop MSG, 50, "Error: vm name &VM_NAME_NEW# is alredy used"
:  endif
:else
! Nom de VM est calculi automatiquement
:  SET &REPEAT# = "Y"
:  SET &count#=1
:  WHILE &REPEAT# = "Y"
:    set &count#=format(&count#, "000")
:    SET &VM_NAME_NEW# = STR_CAT(&VM_NAME#, &count#)
:    if STR_FIND(&UC4RB_VSP_VM_LIST#, &VM_NAME_NEW#)= 0
:      SET &REPEAT# = "N"
:      P new vm name is &VM_NAME_NEW#
:      SET &VM_NAME_LOWER# = STR_LC(&VM_NAME_NEW#)
:      PSET &VM_NAME_NEW#="&VM_NAME_NEW#"
:      pset &VM_NAME_LOWER#="&VM_NAME_LOWER#"
:      PUBLISH &VM_NAME_NEW#, , "WORKFLOW"
:      PUBLISH &VM_NAME_LOWER#, , "WORKFLOW"
:      PUT_VAR_COL &VARA_NAME_TICKET#, "VM_NAME_NEW#", 1, "&VM_NAME_NEW#"
:      PUT_VAR_COL &VARA_NAME_TICKET#, "VM_NAME_LOWER#", 1, "&VM_NAME_LOWER#"
:    endif
:    SET &count# = &count#+1
:    if &count# = 1000
:      SET &REPEAT# = "N"
:    endif
:  endwhile
:endif]]></post_process>
      </row>
   </scripts>
   <job_attributes>
      <row>
         <platform>WINDOWS</platform>
         <agent><![CDATA[<WIN>]]></agent>
         <job_report_path>2</job_report_path>
         <win_work_dir>c:\</win_work_dir>
         <win_typ>2</win_typ>
         <win_view>0</win_view>
         <win_logon_as_batch>0</win_logon_as_batch>
         <win_show_at_desktop>0</win_show_at_desktop>
         <win_report_by_script>0</win_report_by_script>
         <job_object></job_object>
         <win_cmd></win_cmd>
      </row>
   </job_attributes>
   <rollback_definitions>
      <row>
      </row>
   </rollback_definitions>
</jobs>
